package main

import (
	"context"
	"fmt"
	"github.com/sirupsen/logrus"
	"time"

	// ...
	pb "github.com/SETTER2000/shorturl-service-api/api"
	"log"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func main() {
	logrus.SetFormatter(&logrus.JSONFormatter{})
	grpcTarget := fmt.Sprintf("%s:%s", "", "8088")
	// —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
	conn, err := grpc.Dial(grpcTarget, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		logrus.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()

	// –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–æ–≥–æ —Ç–∏–ø–∞ UsersClient,
	// —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
	c := pb.NewIShorturlClient(conn)

	startTime := time.Now()
	logrus.Info("Starting gRPC Client at: ", startTime.Format(time.RFC3339))

	// —Ñ—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
	TestShorturls(c)

	logrus.Infof("[completed in %v mill.sec] SUCCESS üê∂", time.Since(startTime).Milliseconds())
}

// TestShorturls -.
func TestShorturls(c pb.IShorturlClient) {
	// Contact the server and print out its response.
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	// –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	shorturls := []*pb.Shorturl{
		{Slug: "", Url: "https://lphp.ru/artpage/49.html", UserId: "", Del: false},
		{Slug: "", Url: "https://lphp.ru/artpage/39.html", UserId: "", Del: false},
	}
	for _, shorturl := range shorturls {
		// –¥–æ–±–∞–≤–ª—è–µ–º URL
		resp, err := c.LongLink(ctx, &pb.LongLinkRequest{
			Shorturl: shorturl,
		})
		if err != nil {
			log.Fatalf("could not sh: %v", err)
		}
		if resp.Error != "" {
			fmt.Println(resp.Error)
		}

		fmt.Printf("RESPOnse:: %v", resp)
	}
	u := pb.User{}
	// —É–¥–∞–ª—è–µ–º –æ–¥–∏–Ω URL
	resp, err := c.UserDelLink(ctx, &pb.UserDelLinkRequest{
		User: &u,
	})
	if err != nil {
		log.Fatal(err)
	}
	if resp.Error != "" {
		fmt.Println(resp.Error)
	}
	//// –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–æ–ª—å—à–µ 200 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –æ—à–∏–±–∫–∞
	//// —Å –∫–æ–¥–æ–º codes.DeadlineExceeded –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º context deadline exceeded
	//ctx, cancel := context.WithTimeout(context.Background(), 200*time.Millisecond)
	//defer cancel()
	//
	//// –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
	//// –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ—à–∏–±–∫–∞:
	//// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email serge@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω
	//for _, userEmail := range []string{"sveta@example.com", "serge@example.com"} {
	//	resp, err := c.GetUser(ctx, &pb.GetUserRequest{
	//		Email: userEmail,
	//	})
	//	if err != nil {
	//		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
	//		if e, ok := status.FromError(err); ok {
	//			switch e.Code() {
	//			//if e.Code() == codes.NotFound {
	//			// –≤—ã–≤–µ–¥–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	//			//	fmt.Println(`NOT FOUND`, e.Message())
	//			//} else {
	//			// –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤—ã–≤–æ–¥–∏–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
	//			//fmt.Println(e.Code(), e.Message())
	//
	//			// –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	//			case codes.NotFound, codes.DeadlineExceeded:
	//				fmt.Println(e.Message())
	//			default:
	//				// –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç –∏ –∫–æ–¥ –æ—à–∏–±–∫–∏
	//				fmt.Println(e.Code(), e.Message())
	//			}
	//		} else {
	//			fmt.Printf("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É %v", err)
	//		}
	//		log.Fatal(err)
	//	}
	//	if resp.Error == "" {
	//		fmt.Println(resp.User)
	//	} else {
	//		fmt.Println(resp.Error)
	//	}
	//}
	//
	//// –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	//emails, err := c.ListUsers(context.Background(), &pb.ListUsersRequest{
	//	Offset: 0,
	//	Limit:  100,
	//})
	//if err != nil {
	//	log.Fatal(err)
	//}
	//fmt.Println(emails.Count, emails.Emails)
}
