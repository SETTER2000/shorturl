// Package v1 реализует пути маршрутизации. Каждая служба в своем файле.
package v1

import (
	"github.com/SETTER2000/shorturl/config"
	"github.com/SETTER2000/shorturl/internal/usecase"
	"github.com/SETTER2000/shorturl/pkg/log/logger"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/swaggo/http-swagger"
	_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
)

// NewRouter -.
// Swagger spec:
// @title       Shorturl
// @description URL shortener server
// @version     0.1.0
// @host        localhost:8080
// @BasePath    /
func NewRouter(handler *chi.Mux, l logger.Interface, s usecase.Shorturl, cfg config.HTTP) {
	handler.Use(middleware.RequestID)
	handler.Use(middleware.Logger)
	handler.Use(middleware.Recoverer)
	handler.Use(middleware.URLFormat)
	//handler.Use(middleware.CleanPath) // CleanPath удалит ошибки двойной косой черты из пути запроса пользователя
	//handler.Use(render.SetContentType(render.ContentTypePlainText))
	handler.Use(middleware.AllowContentEncoding("gzip"))
	handler.Use(middleware.Compress(5,
		"text/plain",
		"application/json",
		"application/javascript",
		"text/css",
		"text/html",
		"text/xml"))

	// Swagger

	handler.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("/swagger/doc.json"),
		//The url pointing to API definition
	))

	sr := &shorturlRoutes{s, l, cfg}
	handler.Get("/{key}", sr.shortLink) // GET /{key}
	handler.Post("/", sr.longLink)      // POST /

	// Routers
	h := handler.Route("/api", func(r chi.Router) {
		r.Routes()
	})
	{
		newShorturlRoutes(h, s, l, cfg)
	}
}
