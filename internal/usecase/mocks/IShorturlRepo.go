// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/SETTER2000/shorturl/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// IShorturlRepo is an autogenerated mock type for the IShorturlRepo type
type IShorturlRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *IShorturlRepo) Delete(_a0 context.Context, _a1 *entity.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *IShorturlRepo) Get(_a0 context.Context, _a1 *entity.Shorturl) (*entity.Shorturl, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.Shorturl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) (*entity.Shorturl, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) *entity.Shorturl); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Shorturl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Shorturl) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *IShorturlRepo) GetAll(_a0 context.Context, _a1 *entity.User) (*entity.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) (*entity.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) *entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: _a0, _a1
func (_m *IShorturlRepo) Post(_a0 context.Context, _a1 *entity.Shorturl) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *IShorturlRepo) Put(_a0 context.Context, _a1 *entity.Shorturl) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields:
func (_m *IShorturlRepo) Read() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields:
func (_m *IShorturlRepo) Save() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIShorturlRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewIShorturlRepo creates a new instance of IShorturlRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIShorturlRepo(t mockConstructorTestingTNewIShorturlRepo) *IShorturlRepo {
	mock := &IShorturlRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
