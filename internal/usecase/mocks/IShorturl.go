// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/SETTER2000/shorturl/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// IShorturl is an autogenerated mock type for the IShorturl type
type IShorturl struct {
	mock.Mock
}

// LongLink provides a mock function with given fields: _a0, _a1
func (_m *IShorturl) LongLink(_a0 context.Context, _a1 *entity.Shorturl) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Shorturl) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: _a0, _a1
func (_m *IShorturl) Post(_a0 context.Context, _a1 *entity.Shorturl) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadService provides a mock function with given fields:
func (_m *IShorturl) ReadService() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveService provides a mock function with given fields:
func (_m *IShorturl) SaveService() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShortLink provides a mock function with given fields: _a0, _a1
func (_m *IShorturl) ShortLink(_a0 context.Context, _a1 *entity.Shorturl) (*entity.Shorturl, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.Shorturl
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) (*entity.Shorturl, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Shorturl) *entity.Shorturl); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Shorturl)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Shorturl) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAllLink provides a mock function with given fields: ctx, u
func (_m *IShorturl) UserAllLink(ctx context.Context, u *entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, u)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) (*entity.User, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) *entity.User); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDelLink provides a mock function with given fields: ctx, u
func (_m *IShorturl) UserDelLink(ctx context.Context, u *entity.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIShorturl interface {
	mock.TestingT
	Cleanup(func())
}

// NewIShorturl creates a new instance of IShorturl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIShorturl(t mockConstructorTestingTNewIShorturl) *IShorturl {
	mock := &IShorturl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
